---
title: 'Slagging Off JavaScript Frameworks'
description: 'An analysis of how easy it is to slag off various frameworks, and why.'
author: andyshora
date: 14/08/2015
image: http://i.imgur.com/bXONeC0.png
url: 'http://www.andyshora.com/slagging-off-javascript-frameworks'
type: article
_content: false
---

extends layouts/_base

block header
  +large-title-block('', 'Slagging Off ', 'JavaScript Frameworks', 'An analysis of how easy it is to slag off various frameworks, and why..', true, true)

block content
  section.section-gutter
    :markdown
      ##Why didn't you use Vanilla JS?
      
      Remember this, kids. It's the easiest phrase you'll ever learn to introduce yourself as an Elitist Frontend God.

      Sure, many frameworks provide layers of abstractions that can provide opinions about how you should structure your code, and how data should flow, but I'd like to take a look at the big players people love to hate, and assess just how much of the criticism comes down to egosistic snobbery.

  +quote-block('Interviewing a new pilot? You better make sure he knows how to fly the plane if the autopilot fails.','Andy Shora')


  section.section-gutter
    :markdown
      ##Candidate: Underscore.js

      **Dude**: *Did you use Underscore for that?*

      **Me**: *Yeah.*

      **Dude**: *Why?*

      **Me**: *Because Underscore is fucking great at providing the best practice implementations of tons of utility functions.*

      ### VERDICT: Stop with all the bashing.

      It's difficult to attach a negative *third-party code* connotation to something which has been written and revised over and over by [some of the planet's greatest JavaScript Developers](https://github.com/jashkenas/underscore/graphs/contributors). In my eyes, these are the people recruiters often refer to as the *Ninja Rockstars* of our generation.

      The only bad thing about Underscore is that you can perhaps overuse it. I've seen many examples of Developers using _.each when a simple for loop would suffice.

      It's also not cool to answer interview questions using utility functions from Underscore. Asked to check if a variable is a string? Best avoid any mention of _.isString. You need to be familiar with [what's going on inside Underscore.js](http://underscorejs.org/docs/underscore.html).

  +code-block('Interviewing for a JavaScript position? Best use plain old JavaScript.')
    code(class='language-javascript')
      |// How do you check var str is a valid string? 
      | 
      |var valid = _.isString(str); /* fail */
      | 
      |var valid = typeof str === 'string'; /* better */
      | 
      |var valid = toString.call(str) === '[object String]'; /* _ implementation = perfect */
  section.section-gutter
    :markdown
      ##Candidate: jQuery

      **Dude**: *Why did you use jQuery for that?*

      **Me**: *It works, doesn't it?*

      **Dude**: *Yeah, but do you even know why?*

      **Me**: *Look, some guy on StackOverflow who is clearly a genius, did the work for us. Stop asking me questions. You're too old school.*

      ### VERDICT: Use only when absolutely necessary.

      If you've been a developer for more than six months, you're probably aware that snippets of jQuery can anger the Web Development Gods and create a storm of ice and fire which can wipe out the largest armies known to man.

      jQuery has it's uses. It abstracts away cross-browser inconsistencies for every function it exposes. It's great for interacting with the DOM, toggling classes, and sending AJAX requests. It's great for prototyping too. The problem is, it does too much, too easily; to the extent where Junior Developers start to use it for the wrong reasons, and don't learn what's really happening under the hood.

      It's also worth noting that the poor quality of the hundreds of thousands of jQuery plugins which are dotted around the web have lowered jQuery's reputation to the extent where we believe that the only people who use the library are either young and naive, or old and behind-the-times. When I do occasionally use jQuery on a project I always have a fight to prove I'm in neither of these boats!

  section.section-gutter
    :markdown
      ##Candidate: AngularJS

      **Dude**: *Do you know what technology you're going to use for this new project?*

      **Me**: *Angular*

      **Dude**: *But you don't know any of the requirements yet...*

      **Me**: *Angular is awesome. It will do what you need, and I love it right now.*

      ### VERDICT: Great for client-side web apps. Not for pre-rendering markup.

      The most important thing you need to know about AngularJS is that the markup is created dynamically on the client. Search engines will not be able to index your content. Yeah, you can argue with these statements in the comments, but let's be sensible and refer to Angular as a way to build rich client-side applications which don't need to have multiple states indexed by Google.

      So, we've specified why you might not want to choose Angular for a project. Now for the good stuff. Angular is currently my go-to tool for prototyping web apps. The speed at which you can produce views, fetch data and bind it to modules, is blazingly fast. The quality of [third-party directives](http://ngmodules.org/) is currently very good. The [Angular team](https://twitter.com/angularjs) are very active in the community.

      If you're being criticised for using Angular, it's more than likely you're one of the 'Angular for everything' guys I've tried to represent in the dialogue above. *Web apps, yes. Websites, no.*

  section.section-gutter
    :markdown
      You can check out [how I've implemented this quote block module right here](https://github.com/andyshora/andyshora-roots/blob/master/views/modules/quote-block/_quote-block.jade), I believe it's a great way to bake out rich modules with minimal definition in the content files. Whatever your approach, you should still define your posts/articles as Jade files containing front matter at the top, and either have one massive block of markdown, [or a mixture like I have](https://github.com/andyshora/andyshora-roots/blob/master/views/hello.jade).
      *Note: you can use other template systems such as **ejs**, just make sure you've installed the node module as described in the [getting started](http://roots.cx/articles/getting-started) docs.*
  +gallery()
    ul
      li()
        .gallery__caption
          strong Here's what the .jade file for this page looks like
          :markdown
            View the whole file [slagging-off-javascript-frameworks.jade](https://github.com/andyshora/andyshora-roots/blob/master/views/slagging-off-javascript-frameworks.jade)
        img(class='gallery__image' src='http://i.imgur.com/AUy9ah4.png')
  section.section-gutter
      :markdown
        ##Defining Page Variables with Front matter
        I'm using the [Roots Dynamic Content](https://github.com/carrot/roots-dynamic-content/blob/master/docs/intro.md) extension which allows me to add front matter to the top of each jade file. *(That's all the metadata in between the --- at the top)* The keys specified here will then become available in the template, as well as any base templates which have been extended, under post.key_name.

  +code-block('A snippet of the front matter for this page:')
    code(class='language-jade')
      |---
      |title: 'Slagging Off JavaScript Frameworks'
      |description: 'An analysis of how easy it is to slag off various frameworks, and why.'
      |author: andyshora
      |---
  section.section-gutter
      :markdown
        For example, this page extends my base layout file [layouts/_base.jade](https://github.com/andyshora/andyshora-roots/blob/master/views/layouts/_base.jade), which contains references to variables like the title, description and author.

        Now, take a look at how the front matter defined in the [jade template](https://github.com/andyshora/andyshora-roots/blob/master/views/slagging-off-javascript-frameworks.jade) populates this base template during the compilation phase. Magic!

        *Note: if you want programmatic access to all of your posts in a template, for example to create a list of links to them on the homepage, then you'll need to group them into a seperate directory. They will then become available under a site.posts variable as described in the [Roots Dynamic Content Docs](https://github.com/carrot/roots-dynamic-content/blob/master/docs/intro.md).*
  
  section.section-gutter
    :markdown
      ##Deployment
      I deploy my Roots site to [GitHub Pages](https://pages.github.com/), and you should too! It's fast, free and easy to do. Assuming your repo is hosted on GitHub:
      1. Push the public directory using a subtree in Git, to the branch gh-pages: `git subtree push --prefix public origin gh-pages`. Your site should now be available at the domain visible in the settings of your repo.
      2. To use a custom domain, [follow the instructions here](https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/). In short, you need to add a file called CNAME which contains the full domain name you want to use for the site (e.g. andyshora.com). You'll also need to alter your DNS to point the domain to your GitHub account. **I've shown mine below...**
      
      As the `roots clean` command can wipe the public directory, make sure you include any files which need to be copied to / in the [views](https://github.com/andyshora/andyshora-roots/tree/master/views) directory.
  +gallery()
    ul
      li()
        .gallery__caption
          strong Here's the DNS I use for this site:
          :markdown
            I also have a [file called CNAME](https://github.com/andyshora/andyshora-roots/blob/master/public/CNAME) containing my domain name.
        img(class='gallery__image' src='http://i.imgur.com/3bh1aSh.png')
  

  section.section-gutter.section-gutter--alt
    :markdown
      ##how is Roots better than Jekyll?
      
      If you've already got a setup which works for you and delivers the same results, then you're probably looking at the a system pretty similar to what Roots brings. Previously, I had a rather simple SSG I made myself with shell scripts which would extract front matter from posts, pull in static includes and create html pages for me to deploy.
      
      The advantage of Roots, is that it has static site compilation in mind from the beginning. **It's been built specifically to build static websites.** Other systems can be very over-reaching, and converting them into something which can generate a simple static website can take a bit of time.
      
      Personally, I found Jekyll very difficult to get setup, and pretty heavy and slow once it was up and running. The fact that it was Ruby-based game me some install problems, and I found it difficult to extend due to the lack of my Ruby knowledge.
      
      Roots came along and provided me with a nice lightweight alternative. It feels like it has no bloat compared with other big SSGs. Yeah it does pretty much the same thing, but it feels more suited to the job. It feels like the right tool.

  section.section-gutter
    :markdown
      ##Other Advantages
      - `roots watch` comes with fast livereload functionality. If you make a content/style/script change, chances are it's been reloaded in the browser before you can even switch app!
      - For adding simple build tasks to perform before/after the compilation, you can define before and after functions in the app.coffee file. [Read the config docs](http://roots.cx/docs/configuration) and ensure your functions return a promise.
      - Roots is easy to extend. The [number of available plugins](http://roots.cx/extensions) is growing fast, and now is a great time to get involved.
      - The author of Roots, [@jescalan](https://twitter.com/jescalan) is active in a chatroom dedicated to the Roots project. Any queries, [pop him a message in here](https://gitter.im/jenius/roots).

  section.section-gutter
    :markdown
      ##Summary
      Roots is in the early stages of adoption, but the lean approach is provides and the great level of support make it a solid choice for building your next static website.
      This website is still evolving, so there's no doubt I'll be improving things over the next few months. Any questions? [Send me a tweet](https://twitter.com/andyshora) or leave a comment below!

  +bio-block('Andy Shora', 'andyshora', 'https://pbs.twimg.com/profile_images/572092098691907585/skCkcVFS_400x400.jpeg')
    :markdown
      I'm a Front-end Web Developer based in London. I currently work with some very talented people over at [R/GA](http://www.rga.com). I love to build sites which are clean and have great performance, and I dabble with whatever technologies are most suitable for the job. [Send me tweets!](https://twitter.com/andyshora)
  
  section.section-gutter.section-gutter--full
    +comments()
